// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pipelines/v1/pipeline_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	v11 "github.com/videocoin/cloud-api/jobs/v1"
	v1 "github.com/videocoin/cloud-api/profiles/v1"
	rpc "github.com/videocoin/cloud-api/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreatePipelineRequest struct {
	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProfileId            v1.ProfileId `protobuf:"varint,2,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreatePipelineRequest) Reset()         { *m = CreatePipelineRequest{} }
func (m *CreatePipelineRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePipelineRequest) ProtoMessage()    {}
func (*CreatePipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9c63b87d2e4a98, []int{0}
}
func (m *CreatePipelineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePipelineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePipelineRequest.Merge(m, src)
}
func (m *CreatePipelineRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePipelineRequest proto.InternalMessageInfo

func (m *CreatePipelineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreatePipelineRequest) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

func (*CreatePipelineRequest) XXX_MessageName() string {
	return "cloud.api.pipelines.v1.CreatePipelineRequest"
}

type PipelineRequest struct {
	PipelineId           string   `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineRequest) Reset()         { *m = PipelineRequest{} }
func (m *PipelineRequest) String() string { return proto.CompactTextString(m) }
func (*PipelineRequest) ProtoMessage()    {}
func (*PipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9c63b87d2e4a98, []int{1}
}
func (m *PipelineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineRequest.Merge(m, src)
}
func (m *PipelineRequest) XXX_Size() int {
	return m.Size()
}
func (m *PipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineRequest proto.InternalMessageInfo

func (m *PipelineRequest) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (*PipelineRequest) XXX_MessageName() string {
	return "cloud.api.pipelines.v1.PipelineRequest"
}

type CreateStreamRequest struct {
	PipelineId           string   `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStreamRequest) Reset()         { *m = CreateStreamRequest{} }
func (m *CreateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*CreateStreamRequest) ProtoMessage()    {}
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9c63b87d2e4a98, []int{2}
}
func (m *CreateStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStreamRequest.Merge(m, src)
}
func (m *CreateStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStreamRequest proto.InternalMessageInfo

func (m *CreateStreamRequest) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (*CreateStreamRequest) XXX_MessageName() string {
	return "cloud.api.pipelines.v1.CreateStreamRequest"
}

type StreamRequest struct {
	StreamId             string   `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9c63b87d2e4a98, []int{3}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

func (*StreamRequest) XXX_MessageName() string {
	return "cloud.api.pipelines.v1.StreamRequest"
}

type ListResponse struct {
	Items                []*PipelineListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9c63b87d2e4a98, []int{4}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetItems() []*PipelineListItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*ListResponse) XXX_MessageName() string {
	return "cloud.api.pipelines.v1.ListResponse"
}

type UpdatePipelineRequest struct {
	Id                   string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProfileId            v1.ProfileId `protobuf:"varint,3,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdatePipelineRequest) Reset()         { *m = UpdatePipelineRequest{} }
func (m *UpdatePipelineRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePipelineRequest) ProtoMessage()    {}
func (*UpdatePipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9c63b87d2e4a98, []int{5}
}
func (m *UpdatePipelineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePipelineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePipelineRequest.Merge(m, src)
}
func (m *UpdatePipelineRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePipelineRequest proto.InternalMessageInfo

func (m *UpdatePipelineRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdatePipelineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdatePipelineRequest) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

func (*UpdatePipelineRequest) XXX_MessageName() string {
	return "cloud.api.pipelines.v1.UpdatePipelineRequest"
}
func init() {
	proto.RegisterType((*CreatePipelineRequest)(nil), "cloud.api.pipelines.v1.CreatePipelineRequest")
	golang_proto.RegisterType((*CreatePipelineRequest)(nil), "cloud.api.pipelines.v1.CreatePipelineRequest")
	proto.RegisterType((*PipelineRequest)(nil), "cloud.api.pipelines.v1.PipelineRequest")
	golang_proto.RegisterType((*PipelineRequest)(nil), "cloud.api.pipelines.v1.PipelineRequest")
	proto.RegisterType((*CreateStreamRequest)(nil), "cloud.api.pipelines.v1.CreateStreamRequest")
	golang_proto.RegisterType((*CreateStreamRequest)(nil), "cloud.api.pipelines.v1.CreateStreamRequest")
	proto.RegisterType((*StreamRequest)(nil), "cloud.api.pipelines.v1.StreamRequest")
	golang_proto.RegisterType((*StreamRequest)(nil), "cloud.api.pipelines.v1.StreamRequest")
	proto.RegisterType((*ListResponse)(nil), "cloud.api.pipelines.v1.ListResponse")
	golang_proto.RegisterType((*ListResponse)(nil), "cloud.api.pipelines.v1.ListResponse")
	proto.RegisterType((*UpdatePipelineRequest)(nil), "cloud.api.pipelines.v1.UpdatePipelineRequest")
	golang_proto.RegisterType((*UpdatePipelineRequest)(nil), "cloud.api.pipelines.v1.UpdatePipelineRequest")
}

func init() {
	proto.RegisterFile("pipelines/v1/pipeline_service.proto", fileDescriptor_cd9c63b87d2e4a98)
}
func init() {
	golang_proto.RegisterFile("pipelines/v1/pipeline_service.proto", fileDescriptor_cd9c63b87d2e4a98)
}

var fileDescriptor_cd9c63b87d2e4a98 = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xc1, 0x6e, 0xd3, 0x30,
	0x1c, 0xc6, 0xe5, 0x6e, 0x54, 0xab, 0x5b, 0x36, 0xf0, 0x58, 0x55, 0xda, 0xad, 0xeb, 0xbc, 0xa1,
	0x96, 0x42, 0x13, 0x5a, 0x24, 0x24, 0x76, 0x00, 0x89, 0x81, 0x46, 0x11, 0x82, 0xa9, 0x13, 0x17,
	0x2e, 0x53, 0x9a, 0x78, 0x9d, 0xa7, 0x34, 0x0e, 0x89, 0x1b, 0x09, 0x46, 0x11, 0x62, 0x07, 0x1e,
	0x80, 0x47, 0xe1, 0x05, 0x38, 0xee, 0x88, 0xc4, 0x0b, 0xa0, 0x8d, 0x07, 0x41, 0x71, 0x9c, 0x2e,
	0xdb, 0x9a, 0xb6, 0x93, 0x76, 0xb3, 0x1d, 0xff, 0xf3, 0xfb, 0xfe, 0x9f, 0x3f, 0x1b, 0xae, 0xda,
	0xd4, 0x26, 0x26, 0xb5, 0x88, 0xab, 0x7a, 0x75, 0x35, 0x9c, 0xec, 0xb8, 0xc4, 0xf1, 0xa8, 0x4e,
	0x14, 0xdb, 0x61, 0x9c, 0xa1, 0xac, 0x6e, 0xb2, 0x9e, 0xa1, 0x68, 0x36, 0x55, 0x06, 0xdb, 0x15,
	0xaf, 0x9e, 0x2f, 0x0c, 0x2d, 0x0e, 0x8a, 0xf2, 0x6a, 0x87, 0xf2, 0xbd, 0x5e, 0x5b, 0xd1, 0x59,
	0x57, 0xf5, 0xa8, 0x41, 0x98, 0xce, 0xa8, 0xa5, 0x8a, 0x3f, 0xd5, 0x34, 0x9b, 0xaa, 0x8e, 0xad,
	0xab, 0x7b, 0x44, 0x33, 0xf9, 0x9e, 0x2c, 0x78, 0x3c, 0xa6, 0xc0, 0x76, 0xd8, 0x2e, 0x35, 0x25,
	0x4b, 0x8e, 0x65, 0xe9, 0x83, 0x31, 0xa5, 0xfb, 0xac, 0x2d, 0xca, 0xf6, 0x59, 0x5b, 0x56, 0x14,
	0x3a, 0x8c, 0x75, 0x4c, 0xa2, 0x8a, 0x59, 0xbb, 0xb7, 0xab, 0x92, 0xae, 0xcd, 0x3f, 0xca, 0x8f,
	0x8b, 0xf2, 0xa3, 0x5f, 0xaa, 0x59, 0x16, 0xe3, 0x1a, 0xa7, 0xcc, 0x0a, 0x61, 0xb5, 0x08, 0xac,
	0xc3, 0x3a, 0xec, 0xf4, 0x1f, 0xfe, 0x4c, 0x4c, 0xc4, 0x28, 0xd8, 0x8e, 0x4d, 0xb8, 0xb0, 0xe1,
	0x10, 0x8d, 0x93, 0x2d, 0xe9, 0x4f, 0x8b, 0x7c, 0xe8, 0x11, 0x97, 0x23, 0x04, 0xa7, 0x2d, 0xad,
	0x4b, 0x72, 0xa0, 0x04, 0x2a, 0xa9, 0x96, 0x18, 0xa3, 0xa7, 0x10, 0xca, 0xd6, 0x76, 0xa8, 0x91,
	0x4b, 0x94, 0x40, 0x65, 0xb6, 0x51, 0x52, 0x22, 0xf6, 0x87, 0x7d, 0x7b, 0x75, 0x65, 0x2b, 0x18,
	0x37, 0x8d, 0x56, 0xca, 0x0e, 0x87, 0xb8, 0x01, 0xe7, 0xce, 0x73, 0x96, 0x61, 0x7a, 0x70, 0xae,
	0xd4, 0x90, 0x38, 0x18, 0x2e, 0x35, 0x0d, 0xfc, 0x08, 0xce, 0x07, 0x0a, 0xb7, 0xb9, 0x43, 0xb4,
	0xee, 0xc4, 0x75, 0xf7, 0xe1, 0xf5, 0xb3, 0x15, 0x05, 0x98, 0x72, 0xc5, 0xc2, 0xe9, 0xfe, 0x99,
	0x60, 0xa1, 0x69, 0xe0, 0x37, 0x30, 0xf3, 0x9a, 0xba, 0xbc, 0x45, 0x5c, 0x9b, 0x59, 0x2e, 0x41,
	0x4f, 0xe0, 0x35, 0xca, 0x49, 0xd7, 0xcd, 0x81, 0xd2, 0x54, 0x25, 0xdd, 0xa8, 0x28, 0xc3, 0x43,
	0xa6, 0x84, 0xed, 0xf8, 0xc5, 0x4d, 0x4e, 0xba, 0xad, 0xa0, 0x0c, 0x7f, 0x86, 0x0b, 0xef, 0x6c,
	0x63, 0x88, 0xaf, 0xb3, 0x30, 0x31, 0xc0, 0x27, 0xa8, 0x31, 0xf0, 0x39, 0x11, 0xeb, 0xf3, 0xd4,
	0xa5, 0x7d, 0x6e, 0xfc, 0x4c, 0x9f, 0x1a, 0xbd, 0x1d, 0x5c, 0x16, 0xf4, 0x16, 0x26, 0x5f, 0x8a,
	0x40, 0xa3, 0xac, 0x12, 0x24, 0x48, 0x09, 0xa3, 0xa1, 0xbc, 0xf0, 0xe3, 0x95, 0x2f, 0x44, 0x10,
	0x8e, 0xad, 0x2b, 0xc1, 0xf6, 0x6d, 0xae, 0xf1, 0x9e, 0x8b, 0x6f, 0x7c, 0xfb, 0xf3, 0xef, 0x47,
	0x02, 0xa2, 0x19, 0x79, 0x2d, 0x3e, 0xa1, 0x2f, 0x30, 0x19, 0x1c, 0x0c, 0xaa, 0xc5, 0xb9, 0x33,
	0x34, 0x5a, 0xf9, 0xf2, 0x38, 0x33, 0x65, 0x4f, 0x78, 0x51, 0x30, 0xb3, 0xf8, 0xa6, 0xc8, 0x7a,
	0xe4, 0x12, 0xbb, 0xeb, 0xa0, 0x8a, 0x76, 0xe0, 0xb4, 0xef, 0x7a, 0x6c, 0x3b, 0x6b, 0x71, 0x98,
	0xe8, 0x41, 0xe3, 0xdb, 0x82, 0x31, 0x8f, 0x2e, 0x32, 0x90, 0x03, 0x93, 0xcf, 0x89, 0x49, 0x38,
	0x41, 0x63, 0x15, 0x87, 0xad, 0xc5, 0x68, 0xc1, 0x65, 0x41, 0x59, 0xa9, 0x2e, 0x5f, 0xa0, 0xa8,
	0x07, 0x91, 0x18, 0xf7, 0xd1, 0x21, 0x80, 0xc9, 0x20, 0x38, 0xf1, 0xae, 0x0e, 0x0d, 0xd6, 0xe4,
	0xae, 0xae, 0x08, 0x2d, 0x85, 0x7c, 0x76, 0x88, 0x16, 0x6a, 0xf4, 0x7d, 0x6b, 0xbf, 0x02, 0x38,
	0xb5, 0x49, 0xf8, 0xe4, 0x7d, 0x4f, 0x0c, 0x97, 0x46, 0xa0, 0xb1, 0x46, 0x7c, 0x07, 0x30, 0xed,
	0x1f, 0x54, 0x70, 0x87, 0xdd, 0xc9, 0xa5, 0x14, 0x23, 0x1b, 0xfd, 0x97, 0xd5, 0xdf, 0xf3, 0x8a,
	0xb5, 0xa5, 0x00, 0x17, 0xab, 0x42, 0xc1, 0x5d, 0x54, 0x1e, 0xa3, 0x40, 0x75, 0x25, 0xd9, 0x83,
	0x99, 0xe8, 0x03, 0x84, 0xee, 0x8d, 0x4e, 0xfb, 0x99, 0x47, 0x27, 0xbf, 0x34, 0x52, 0x0d, 0xce,
	0x0b, 0x31, 0xb7, 0xf0, 0x5c, 0x28, 0x46, 0x42, 0xfd, 0x43, 0x70, 0x60, 0x26, 0x88, 0x9f, 0xe4,
	0xde, 0x89, 0xe3, 0x9e, 0x25, 0xc6, 0x45, 0x70, 0x55, 0xa0, 0x96, 0xaa, 0x85, 0x73, 0x28, 0xf5,
	0x60, 0xf0, 0x2a, 0xf6, 0x91, 0x07, 0x53, 0x9b, 0x84, 0x5f, 0x0e, 0x38, 0xa6, 0x45, 0xc9, 0x45,
	0x23, 0xb9, 0x7d, 0x98, 0x6a, 0xf5, 0xac, 0x2b, 0xe5, 0x56, 0x05, 0x77, 0x0d, 0x2f, 0x8f, 0xe0,
	0xaa, 0x4e, 0xcf, 0xf2, 0xad, 0x3e, 0x04, 0x30, 0xb3, 0xa1, 0x59, 0x3a, 0x31, 0xaf, 0x54, 0x42,
	0x4d, 0x48, 0x28, 0x63, 0x3c, 0x4a, 0x82, 0x2e, 0xb8, 0xeb, 0xa0, 0xfa, 0x2c, 0x77, 0x74, 0x5c,
	0x04, 0xbf, 0x8f, 0x8b, 0xe0, 0xef, 0x71, 0x11, 0xfc, 0x3a, 0x29, 0x82, 0xa3, 0x93, 0x22, 0x78,
	0x9f, 0xf0, 0xea, 0xed, 0xa4, 0x38, 0xcb, 0x87, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x61, 0xbc,
	0xd6, 0x8a, 0x10, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PipelineServiceClient is the client API for PipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipelineServiceClient interface {
	Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
	Create(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error)
	List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	Delete(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*types.Empty, error)
	Update(ctx context.Context, in *UpdatePipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error)
	Get(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error)
	ListStreams(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*v11.JobProfiles, error)
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*v11.JobProfile, error)
	DeleteStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*types.Empty, error)
	GetStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*v11.JobProfile, error)
	RunStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*v11.JobProfile, error)
	CancelStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*v11.JobProfile, error)
}

type pipelineServiceClient struct {
	cc *grpc.ClientConn
}

func NewPipelineServiceClient(cc *grpc.ClientConn) PipelineServiceClient {
	return &pipelineServiceClient{cc}
}

func (c *pipelineServiceClient) Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) Create(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error) {
	out := new(PipelineProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) Delete(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) Update(ctx context.Context, in *UpdatePipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error) {
	out := new(PipelineProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) Get(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error) {
	out := new(PipelineProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) ListStreams(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*v11.JobProfiles, error) {
	out := new(v11.JobProfiles)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/ListStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*v11.JobProfile, error) {
	out := new(v11.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/CreateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) DeleteStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/DeleteStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*v11.JobProfile, error) {
	out := new(v11.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/GetStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) RunStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*v11.JobProfile, error) {
	out := new(v11.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/RunStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) CancelStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*v11.JobProfile, error) {
	out := new(v11.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/CancelStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineServiceServer is the server API for PipelineService service.
type PipelineServiceServer interface {
	Health(context.Context, *types.Empty) (*rpc.HealthStatus, error)
	Create(context.Context, *CreatePipelineRequest) (*PipelineProfile, error)
	List(context.Context, *types.Empty) (*ListResponse, error)
	Delete(context.Context, *PipelineRequest) (*types.Empty, error)
	Update(context.Context, *UpdatePipelineRequest) (*PipelineProfile, error)
	Get(context.Context, *PipelineRequest) (*PipelineProfile, error)
	ListStreams(context.Context, *PipelineRequest) (*v11.JobProfiles, error)
	CreateStream(context.Context, *CreateStreamRequest) (*v11.JobProfile, error)
	DeleteStream(context.Context, *StreamRequest) (*types.Empty, error)
	GetStream(context.Context, *StreamRequest) (*v11.JobProfile, error)
	RunStream(context.Context, *StreamRequest) (*v11.JobProfile, error)
	CancelStream(context.Context, *StreamRequest) (*v11.JobProfile, error)
}

// UnimplementedPipelineServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPipelineServiceServer struct {
}

func (*UnimplementedPipelineServiceServer) Health(ctx context.Context, req *types.Empty) (*rpc.HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedPipelineServiceServer) Create(ctx context.Context, req *CreatePipelineRequest) (*PipelineProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedPipelineServiceServer) List(ctx context.Context, req *types.Empty) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedPipelineServiceServer) Delete(ctx context.Context, req *PipelineRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedPipelineServiceServer) Update(ctx context.Context, req *UpdatePipelineRequest) (*PipelineProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedPipelineServiceServer) Get(ctx context.Context, req *PipelineRequest) (*PipelineProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedPipelineServiceServer) ListStreams(ctx context.Context, req *PipelineRequest) (*v11.JobProfiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreams not implemented")
}
func (*UnimplementedPipelineServiceServer) CreateStream(ctx context.Context, req *CreateStreamRequest) (*v11.JobProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (*UnimplementedPipelineServiceServer) DeleteStream(ctx context.Context, req *StreamRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStream not implemented")
}
func (*UnimplementedPipelineServiceServer) GetStream(ctx context.Context, req *StreamRequest) (*v11.JobProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (*UnimplementedPipelineServiceServer) RunStream(ctx context.Context, req *StreamRequest) (*v11.JobProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunStream not implemented")
}
func (*UnimplementedPipelineServiceServer) CancelStream(ctx context.Context, req *StreamRequest) (*v11.JobProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelStream not implemented")
}

func RegisterPipelineServiceServer(s *grpc.Server, srv PipelineServiceServer) {
	s.RegisterService(&_PipelineService_serviceDesc, srv)
}

func _PipelineService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).Health(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).Create(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).List(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).Delete(ctx, req.(*PipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).Update(ctx, req.(*UpdatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).Get(ctx, req.(*PipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_ListStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).ListStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/ListStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).ListStreams(ctx, req.(*PipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/CreateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_DeleteStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).DeleteStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/DeleteStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).DeleteStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/GetStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_RunStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).RunStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/RunStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).RunStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_CancelStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).CancelStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/CancelStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).CancelStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PipelineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.pipelines.v1.PipelineService",
	HandlerType: (*PipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _PipelineService_Health_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PipelineService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PipelineService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PipelineService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PipelineService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PipelineService_Get_Handler,
		},
		{
			MethodName: "ListStreams",
			Handler:    _PipelineService_ListStreams_Handler,
		},
		{
			MethodName: "CreateStream",
			Handler:    _PipelineService_CreateStream_Handler,
		},
		{
			MethodName: "DeleteStream",
			Handler:    _PipelineService_DeleteStream_Handler,
		},
		{
			MethodName: "GetStream",
			Handler:    _PipelineService_GetStream_Handler,
		},
		{
			MethodName: "RunStream",
			Handler:    _PipelineService_RunStream_Handler,
		},
		{
			MethodName: "CancelStream",
			Handler:    _PipelineService_CancelStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipelines/v1/pipeline_service.proto",
}

func (m *CreatePipelineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePipelineRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPipelineService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ProfileId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPipelineService(dAtA, i, uint64(m.ProfileId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PipelineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PipelineId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPipelineService(dAtA, i, uint64(len(m.PipelineId)))
		i += copy(dAtA[i:], m.PipelineId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PipelineId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPipelineService(dAtA, i, uint64(len(m.PipelineId)))
		i += copy(dAtA[i:], m.PipelineId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StreamId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPipelineService(dAtA, i, uint64(len(m.StreamId)))
		i += copy(dAtA[i:], m.StreamId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPipelineService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdatePipelineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePipelineRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPipelineService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPipelineService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ProfileId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPipelineService(dAtA, i, uint64(m.ProfileId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPipelineService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreatePipelineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPipelineService(uint64(l))
	}
	if m.ProfileId != 0 {
		n += 1 + sovPipelineService(uint64(m.ProfileId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PipelineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PipelineId)
	if l > 0 {
		n += 1 + l + sovPipelineService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PipelineId)
	if l > 0 {
		n += 1 + l + sovPipelineService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovPipelineService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPipelineService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePipelineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPipelineService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPipelineService(uint64(l))
	}
	if m.ProfileId != 0 {
		n += 1 + sovPipelineService(uint64(m.ProfileId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPipelineService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPipelineService(x uint64) (n int) {
	return sovPipelineService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreatePipelineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePipelineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePipelineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			m.ProfileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileId |= v1.ProfileId(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelineService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipelineService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PipelineId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelineService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipelineService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PipelineId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelineService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipelineService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelineService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipelineService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &PipelineListItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelineService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipelineService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePipelineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePipelineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePipelineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			m.ProfileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileId |= v1.ProfileId(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelineService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipelineService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPipelineService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPipelineService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipelineService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipelineService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPipelineService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPipelineService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPipelineService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPipelineService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPipelineService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPipelineService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPipelineService   = fmt.Errorf("proto: integer overflow")
)
